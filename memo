#!/usr/bin/env bash
set -euo pipefail

MEMO_FILE="${MEMO_FILE:-"$HOME/memol.txt"}"
MEMO_FILE_TMP="$MEMO_FILE.tmp"

COLOR_OFF="\033[0m"
COLOR_RED="\033[0;31m"
COLOR_GREEN="\033[0;32m"

function usage() {
    cat << EOS
memo Your task stack

USAGE:
memo <SUBCOMMAND>

OPTIONS:

SUBCOMMANDS:
all      all your latest task
clear    clear your latest task
help     Print this message or the help of the given subcommand(s)
peek     check your latest task
pop      pop your latest task
push     push your latest task
top      check your latest task
EOS
}

function core.option.reverse() {
    FLAG="0"
    for I in "${@}"; do
        if [ "-r" == "$I" ]; then
            FLAG="1"
        fi
    done
    echo "$FLAG"
}
function core.option.number() {
    N="-1"
    while test $# -ne 0; do
        case $1 in
            "-n" )
                N="$2"
                shift ;;
        esac
        shift
    done
    echo "$N"
}

function core.option.text() {
    echo "${@:$#:1}"
}

function core.prepare() {
    if [ ! -f "$MEMO_FILE" ]; then touch "$MEMO_FILE"; fi
}

function core.all() {
    r="$(core.option.reverse "${@}")"
    n="$(core.option.number "${@}")"
    if [ "$r" == "1" ]; then
        if [ "$n" -gt "-1" ]; then
            head -n "$n" "$MEMO_FILE"
        else
            head "$MEMO_FILE"
        fi
    else
        if [ "$n" -gt "-1" ]; then
            tail -r -n "$n" "$MEMO_FILE"
        else
            tail -r "$MEMO_FILE"
        fi
    fi
}

function core.clear() {
    if [ -f "$MEMO_FILE" ]; then rm "$MEMO_FILE"; fi
}

function core.push() {
    r="$(core.option.reverse "${@}")"
    txt="$(core.option.text "${@}") (at: $(date "+%Y/%m/%d_%H:%M:%S"))"
    if [ "$r" == "1" ]; then
        tail -r "$MEMO_FILE" > "$MEMO_FILE_TMP"

        echo "$txt" >> "$MEMO_FILE_TMP"

        tail -r "$MEMO_FILE_TMP" > "$MEMO_FILE"
        if [ -f "$MEMO_FILE_TMP" ]; then rm "$MEMO_FILE_TMP"; fi
    else
        echo "$txt" >> "$MEMO_FILE"
    fi
}

function core.pop() {
    r="$(core.option.reverse "${@}")"
    if [ "$r" == "1" ]; then
        tail -r "$MEMO_FILE" > "$MEMO_FILE_TMP"

        sed -i -e '$d' "$MEMO_FILE_TMP"

        tail -r "$MEMO_FILE_TMP" > "$MEMO_FILE"
        if [ -f "$MEMO_FILE_TMP" ]; then rm "$MEMO_FILE_TMP"; fi
    else
        sed -i -e '$d' "$MEMO_FILE"
    fi
}

function core.peek() {
    r="$(core.option.reverse "${@}")"
    if [ "$r" == "1" ]; then
        head -n 1 "$MEMO_FILE"
    else
        tail -r -n 1 "$MEMO_FILE"
    fi
}

function main() {
    core.prepare

    subcmd="${1:-nothing}"
    case "$subcmd" in
        "all" )
            core.all "${@:2:($#)}"
            exit 0 ;;
        "clear" )
            core.clear "${@:2:($#)}"
            exit 0 ;;
        "peek" | "top" )
            core.peek  "${@:2:($#)}"
            exit 0 ;;
        "pop" )
            core.pop  "${@:2:($#)}"
            exit 0 ;;
        "push" )
            core.push  "${@:2:($#)}"
            exit 0 ;;
        "help" )
            usage
            exit 0 ;;
        "_test_")
            tests
            exit 0;;
        * )
            exit 1 ;;
    esac
}


main "$@"
